#!/usr/local/bin/dash
# File preview handler for lf.
# Dependencies (OpenBSD):
# mediainfo bat cdrtools odt2txt gnupg
# chafa ffmpegthumbnailer xdotool
#
# For the script you need to know first how many
# screen pixels equal to 1 column and 1 line on your terminal
# to determine that number run:
# echo $(($(xdotool getactivewindow getwindowgeometry --shell | grep WIDTH | sed 's/[^0-9]//g') / $COLUMNS))
#
# This will output a number that you should put into
# the "PIXELS" variable.
#
# Remember that everytime you change font or fontsize this number
# might change and you will need to change it inside this script
# everytime you do so:
#
# NOTES:
# The script will get the window width of the focused window. If
# lf doesn't have the focus the preview size will be wrong.
# Also the script asumes that the preview takes 1/3 of the window
# for that to be true, put this in your lf config:
# 	set ratios 1:1:1

PIXELS=10

WIDTH=$(($(xdotool getactivewindow getwindowgeometry --shell | grep WIDTH | sed 's/[^0-9]//g')/$PIXELS/3 - 5))

case "$(xdg-mime query filetype "$1")" in
	text/markdown) bat "$1" -l md -f --style plain ;;
	text/x-tex) bat "$1" -l tex -f --style plain ;;
	text/* | */xml | application/json | application/x-shellscript | */x-perl | */x-cdrdao-toc | */x-m4 | */x-troff-man | */x-theme | */x-yaml | */x-xbitmap) cat "$1" | fold -w $WIDTH | bat -fp;;
	text/troff) man ./ "$1" | col -b ;;
	audio/flac)
		ffmpeg -i "$1" -y -f ffmetadata "${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt"
		NAME="$(cat ${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt | egrep -i ALBUM | rev | gcut -d= -f1 | rev | tr -cd '[:alnum:]._-')"
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$NAME"
		[ ! -f "$CACHE.jpg" ] && ffmpeg -i "$1" -y -an -vcodec copy "$CACHE.jpg"
		chafa --size $WIDTH "$CACHE.jpg"
		echo "\n$(cat ${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt | grep -ivwE "(comment|encoder|ffmetadata1)")";;
	audio/mp4)
		ffmpeg -i "$1" -y -f ffmetadata "${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt"
		NAME="$(cat ${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt | egrep -i ALBUM | rev | gcut -d= -f1 | rev | tr -cd '[:alnum:]._-')"
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$NAME"
		[ ! -f "$CACHE.jpg" ] && ffmpeg -i "$1" -y -an -vcodec copy "$CACHE.jpg"
		chafa --size $WIDTH "$CACHE.jpg"
		echo "\n$(cat ${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt | grep -ivwE "(comment|encoder|ffmetadata1)")";;
	audio/mpeg)
		ffmpeg -i "$1" -y -f ffmetadata "${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt"
		NAME="$(cat ${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt | egrep -i ALBUM | rev | gcut -d= -f1 | rev | tr -cd '[:alnum:]._-')"
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$NAME"
		[ ! -f "$CACHE.jpg" ] && ffmpeg -i "$1" -y -an -vcodec copy "$CACHE.jpg"
		chafa --size $WIDTH "$CACHE.jpg"
		echo "\n$(cat ${XDG_CACHE_HOME:-$HOME/.cache}/lf/metadata.txt | grep -ivwE "(comment|encoder|ffmetadata1)")";;
        */x-iso9660-image ) isoinfo -d -i "$1" | tr '\t' ' '| tr -s " " || exit 1;;
        *opendocument*) odt2txt "$1" | fold -w $WIDTH ;;
	application/pgp-encrypted) gpg -d -- "$1" ;;
	image/*) chafa --size $WIDTH "$1" ;;
        */pdf) pdftotext "$1" - | sed ':a;N;$!ba;s/\n/\t/g' | fold -w $WIDTH ;;
	video/* )
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256 | awk '{print $1}')"
		[ ! -f "$CACHE" ] && ffmpegthumbnailer -i "$1" -o "$CACHE.jpg" -s 0
		chafa --size $WIDTH "$CACHE.jpg"
		echo "\n$(mediainfo "$1" | grep -E "File size|Duration|FPS|Movie name" | grep -v "SPF)" | tr '\t' ' '| tr -s " " | sort | uniq )"
		;;
	application/vnd.comicbook+zip)
		NAME="$(echo "$1" | rev | sed 's/ /_/g' | sed 's/\// /g' | awk '{print $1}' | rev)"
		FIRST="$(unzip -l "$1" | head -5 | tail -1 | awk '{$1=""; $2=""; $3=""; sub("   ", " "); print}' | cut -c 2-)"
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$NAME"
		[ ! -d "$CACHE" ] && 7z e "$1" -o"$CACHE" "$FIRST" >/dev/null
		IMG="$(find $CACHE | grep jpg | sort | head -n 1)"
		chafa --size $WIDTH "$IMG"
		;;
	*/*) mediainfo "$1" | tr '\t' ' '| tr -s " " || exit 1 ;;
esac
exit 1
