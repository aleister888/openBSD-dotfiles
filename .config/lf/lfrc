#       _      _     _              _  __                    __ _
#  __ _| | ___(_)___| |_ ___ _ __  | |/ _|   ___ ___  _ __  / _(_) __ _
# / _` | |/ _ \ / __| __/ _ \ '__| | | |_   / __/ _ \| '_ \| |_| |/ _` |
#| (_| | |  __/ \__ \ ||  __/ |    | |  _| | (_| (_) | | | |  _| | (_| |
# \__,_|_|\___|_|___/\__\___|_|    |_|_|    \___\___/|_| |_|_| |_|\__, |
#
# Dependencias (OpenBSD):
# ImageMagick bat cdrtools poppler odt2txt
# gnupg mediainfo ripgrep fzf
#
# Abridores de archivos:
#   Esto son las apps que uso en mi sitema, puedes cambiarlas poniendo
#   tus ajustes en la sección mimeopen, encargada de abrir los archivos:
#
# feh mpv zathura zathura-pdf-mupdf nsxiv keepassxc
#
# p5-File-MimeInfo:
#   Si no estas usando un entorno de escritorio, instala p5-File-MimeInfo
#   y escporta la variable XDG_CURRENT_DESKTOP=X-Generic. Si no xdg-utils
#   no podrá leer los tipos de archivo correctamente.
#
# Aplicaciones que necesitan de compilarse:
#
#  atool2: Dispongo de un script de compilado, busca aquí:
#    https://raw.githubusercontent.com/aleister888/openBSD-dotfiles/main/install.sh
#
# trash-cli: https://github.com/andreafrancia/trash-cli.git
# 	Instala "py3-pip" y ejecuta "pip install trash-cli"
# 	Crea los directorios necesarios tal que así:
# 		doas mkdir --parent /.Trash
#		doas chmod a+rw /.Trash
# 		doas chmod +t /.Trash

set shell dash
set shellopts '-c'
set ifs "\n"
set filesep "\n"
set scrolloff 10
set icons
set period 1

set previewer '~/.config/lf/scope'

set info size:time
# Relación entre columnas
set ratios 1:1:1
# Definir Archivos Ocultos
set hiddenfiles ".*:*.aux:*.toc:*.core:*.out"

# Renombrar/Copiar/Mover Archivos
map p paste
map r rename
map <c-r> bulk-rename
# Buscar Archivos
map / :fzf_jump
map <c-_> :fzf_search
# Borrar Archivos
map S delete
map D trash
map <a-d> restore-trash
map <c-d> clean-trash
# Volver a $HOME
map Z home
# Extraer y comprimir Archivos
map E extract
map <c-e> compress
# Limpiar pantalla
map R :reload; clean
# Abrir Archivos
cmd open-with %export QT_QPA_PLATFORMTHEME=qt5ct; "$@" "$fx"
map <enter> push :open-with<space>
map o &mimeopen $f
map O $mimeopen --ask $f && clear
# Mostrar/Ocultar Archivos Ocultos
map h set hidden!
# Editar Archivo
map V push :!nvim<space>$f
# Copiar al porta-papeles la ruta del archivo
map Y $printf "%s" "$fx" | xclip -selection clipboard
# Poder arrastar archivo gráficamente
map <c-z> $dragon-drop -a -x $fx
# Imprimr tamaño de la Carpeta/s o Archivo(s)
map P size
# Ejecutar comandos
map s shell

cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0;$(pwd | sed "s|$HOME|~|")\007" >/dev/tty
}}

# Imprimir como título de ventana nuesto CWD
on-cd

# Comandos

cmd clean ${{
	clear
}}

cmd compress ${{
	clear; tput bold
	set -f
	echo "COMPRESS EVERYTHING:"
	echo "  INSIDE => $(echo $f |sed 's#/[^/]*$##')"
	echo "  INTO   => /tmp/$(echo $PWD | sed 's/\//\_/g').tar.gz"
	printf "Compress? [y/N]"
	read ans
	[ $ans = "y" ] && tar -zcvf /tmp/$(date +'%H_%M_%S').tar.gz . && printf "done"
	read ans
}}

cmd size &{{
  dunstctl close-all
  notify-send "📚 Size is $(du -chs $fx | grep total | awk {'print $1'})"
}}

cmd home :cd ~/

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd open ${{
    case $(xdg-mime query filetype "$(readlink -f $f)") in
	image/svg+xml) display -- $f ;;
	application/vnd.oasis.opendocument.spreadsheet) libreoffice $f >/dev/null;;
	application/vnd.oasis.opendocument.text) libreoffice $f >/dev/null;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document) libreoffice $f >/dev/null;;
	application/x-keepass2) notify-send -i keepassxc "Just open Keepass...";;
	text/*|application/json|inode/x-empty) $EDITOR $fx;;
	application/x-shellscript) $EDITOR $fx;;
	image/*) rotdir $f | ggrep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" | nsxiv -aio ;;
	audio/*) mpv --audio-display=no $f ;;
	video/*) mpv $f >/dev/null;;
	application/pdf|application/vnd*|application/epub*) zathura $f;;
	application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
	clear; tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract $f?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $f && printf "done"
	read ans
}}

cmd paste ${{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -r -- "$@" . && notify-send "📋 File(s) copied." >/dev/null;;
        move) mv -- "$@" . && notify-send "📋 File(s) moved." >/dev/null;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd delete ${{
  clear; tput bold
  set -f
  printf "%s\n\n" "$fx"
  printf "¿Borrar archivo(s)? [y/N] "
  read ans
  [ $ans = "y" ] && rm -rf -- $fx && \
  notify-send -i \
  /usr/local/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
  "Archivos borrados"
}}

cmd trash ${{
  clear; tput bold
  set -f
  printf "%s\n\n" "$fx"
  printf "¿Mover archivo(s) a la papelera? [y/N] "
  read ans
  [ $ans = "y" ] && trash-put $fx &&
  notify-send -i \
  /usr/local/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
  "Archivos movidos a la papelera"
}}

cmd clean-trash ${{
  clear; tput bold
  set -f
  printf "Contenidos de la papelera:\n"
  trash-list
  printf "¿Vaciar papelera? [y/N] "
  read ans
  [ $ans = "y" ] && trash-empty -f && \
  notify-send -i \
  /usr/local/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
  "Archivos borrados"
}}

cmd restore-trash ${{
  clear; tput bold
  set -f
  printf "Contenidos de la papelera:\n"
  trash-list
  printf "¿Restaurar papelera? [y/N] "
  read ans
  [ $ans = "y" ] && trash-restore && printf "done"
}}
